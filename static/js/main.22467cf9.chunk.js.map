{"version":3,"sources":["Params.js","components/Field.js","store/actions/index.js","App.js","serviceWorker.js","store/index.js","store/reducers/mix.js","index.js"],"names":["COLORS","Field","currentCell","currentColor","clickIndex","canClick","colorsPair","this","props","mixColors","color","event","isActive","Boolean","target","style","background","classList","add","index","colors","getStatus","setSuccess","setFirstColor","setError","cell","remove","setTimeout","alert","tiles","push","className","key","onClick","doAnimate","bind","onAnimationEnd","compareColors","React","Component","connect","state","dispatch","type","App","window","location","hostname","match","store","createStore","action","newState","randomColor","Math","floor","random","length","filter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22467cf9.chunk.js","sourcesContent":["export const COLORS     = ['red', 'blue', 'pink', 'yellow', 'lime', 'brown', 'green', 'purple']\r\nexport const CELL_COUNT = 16","import React from 'react';\r\nimport { DO_MIX_COLORS } from '../store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { CELL_COUNT } from '../Params'\r\n\r\n/**\r\n * Основное поле игры\r\n */\r\nclass Field extends React.Component {\r\n    constructor() {\r\n        super()\r\n        /** @type {Object} Последняя выбранная ячейка, DOM-элемент. */\r\n        this.currentCell = null\r\n\r\n        /** @type {string} Последний выбранный цвет для ячейки. */\r\n        this.currentColor = null\r\n\r\n        /** @type {int} Счетчик нажатий на ячейки. */\r\n        this.clickIndex = 0\r\n\r\n        /** @type {bool} разрешено ли действи клика. */\r\n        this.canClick = true\r\n\r\n        /** @type {int} Текущее кол-во пар успешно выбранных ячеек. */\r\n        this.colorsPair = 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.mixColors()\r\n    }\r\n\r\n    /**\r\n     * Проверка на совпадение цвета с текущим\r\n     *\r\n     * @param string color текущий цвет\r\n     * \r\n     * @return bool\r\n     */\r\n    getStatus(color) {\r\n        return this.currentColor === color\r\n    }\r\n\r\n    /**\r\n     * Запуск анимации\r\n     * \r\n     * @return void\r\n     */\r\n    doAnimate(event) {\r\n        const isActive = Boolean(event.target.style.background)\r\n        if (false === this.canClick || true === isActive){\r\n            return\r\n        }\r\n        \r\n        event.target.classList.add('animate')\r\n    }\r\n\r\n    /**\r\n     * Обработка ячейки\r\n     *\r\n     * @param int index порядковый номер случайного цвета в сторе\r\n     * \r\n     * @return void\r\n     */\r\n    compareColors(index, event) {\r\n        this.clickIndex++\r\n        const color = this.props.colors[index]\r\n\r\n        if (this.clickIndex === 2 && this.getStatus(color)) {\r\n            this.setSuccess(color, event.target)\r\n        } else if (this.clickIndex === 1) {\r\n            this.setFirstColor(color, event.target)\r\n        } else {\r\n            this.setError(color, event.target)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Установка цвета при первом выборе ячейки\r\n     *\r\n     * @param string color текущий цвет\r\n     * @param Object cell  окрашиваемая ячейка\r\n     * \r\n     * @return void\r\n     */\r\n    setFirstColor(color, cell) {\r\n        cell.classList.remove('animate')\r\n        cell.style.background = color\r\n        this.currentCell      = cell\r\n        this.currentColor     = color\r\n    }\r\n\r\n    /**\r\n     * Установка цвета при успешном втором попадании\r\n     *\r\n     * @param string color текущий цвет\r\n     * @param Object cell  окрашиваемая ячейка\r\n     * \r\n     * @return void\r\n     */\r\n    setSuccess(color, cell) {\r\n        this.colorsPair++\r\n        cell.style.background = color\r\n        this.currentCell      = null\r\n        this.currentColor     = null\r\n        this.clickIndex       = 0\r\n        \r\n        if (this.colorsPair === 8) {\r\n            setTimeout(() => alert('Игра окончена'))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Сброс цвета при неудачном втором попадании\r\n     *\r\n     * @param string color текущий цвет\r\n     * @param Object cell  окрашиваемая ячейка\r\n     * \r\n     * @return void\r\n     */\r\n    setError(color, cell) {\r\n        cell.style.background = color\r\n        this.canClick = false;\r\n        setTimeout(() => {\r\n            cell.classList.remove('animate')\r\n            cell.style.background             = ''\r\n            this.currentCell.style.background = ''\r\n            this.currentColor                 = null\r\n            this.clickIndex                   = 0\r\n            this.canClick                     = true\r\n        }, 500)\r\n    }\r\n\r\n    /**\r\n     * {Render}\r\n     */\r\n    render() {\r\n        const tiles = [];\r\n        for (let index = 0; index < CELL_COUNT; index++) {\r\n            tiles.push(\r\n                <div \r\n                    className=\"cell\" \r\n                    key={index} \r\n                    onClick={this.doAnimate.bind(this)}\r\n                    onAnimationEnd={this.compareColors.bind(this, index)}\r\n                ></div>\r\n            )\r\n        }\r\n\r\n        return (\r\n        <div className=\"field\">\r\n            {tiles}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        colors : state,\r\n    }),\r\n    dispatch => ({\r\n        mixColors() {\r\n            dispatch({type: DO_MIX_COLORS})\r\n        },\r\n    })\r\n)(Field)","export const DO_MIX_COLORS = 'DO_MIX_COLORS'","import React, {Component} from 'react';\nimport './App.css';\nimport Field from './components/Field'\n\nexport default class App extends Component {\n  render() {\n    return (\n        <Field/>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux'\r\nimport mix from './reducers/mix'\r\n\r\nconst store = createStore(mix)\r\nexport default store","import { DO_MIX_COLORS } from '../actions'\r\nimport { COLORS, CELL_COUNT } from '../../Params'\r\n\r\nexport default function mixColors(state = COLORS, action) {\r\n    if (action.type === DO_MIX_COLORS) {\r\n        let newState = []\r\n\r\n        for (let index = 0; index < CELL_COUNT; index++) {\r\n            let randomColor = state[Math.floor(Math.random() * state.length)]\r\n            let countColor  = newState.filter((color) => color === randomColor);\r\n\r\n            if (countColor.length < 2) {\r\n                newState.push(randomColor)\r\n            } else {\r\n                index--\r\n            }\r\n        }\r\n\r\n        return newState\r\n    }\r\n\r\n    return state\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}